package must

import (
	"errors"
	"testing"

	"github.com/brianvoe/gofakeit/v6"
	"github.com/stretchr/testify/assert"
)

{{- define "MockFatal" -}}
		var fatalCount int
		var fatalErr error
		SetFatalFunc(func(err error) {
			fatalCount++
			fatalErr = err
		})
{{- end -}}
{{ define "CallNonFatal" -}}
		{{/* Variable attribution */ -}}
		{{ range $j := IntRange 1 . }}
		{{ end -}}
		{{ FuncName . }}(nil)
{{- end -}}
{{ define "AssertNonFatal" -}}
		assert.Zero(t, fatalCount, "fatal must have never been called")
		assert.Nil(t, fatalErr)
{{- end -}}
{{ define "CallFatal" -}}
		fakeErr := errors.New(gofakeit.SentenceSimple())
		{{/* Variable attribution */ -}}
		{{ range $j := IntRange 1 . }}
		{{ end -}}
		Do0(fakeErr)
{{- end -}}
{{ define "AssertFatal" -}}
		assert.Equal(t, 1, fatalCount, "fatal must have called the fatal func exactly once")
		assert.Equal(t, fakeErr, fatalErr)
{{- end -}}


{{ range $i := IntRange 0 .Max }}
func Test{{ FuncName $i }}(t *testing.T) {
	t.Run("When does not have error", func(t *testing.T) {
		{{ template "MockFatal" $i }}

		{{ template "CallNonFatal" $i }}

		{{ template "AssertNonFatal" $i }}
	})
	t.Run("When has error", func(t *testing.T) {
		{{ template "MockFatal" $i }}

		{{ template "CallFatal" $i }}

		{{ template "AssertFatal" $i }}
	})
}
{{ end}}